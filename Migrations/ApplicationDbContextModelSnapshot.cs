// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using YourMatchTgBot;

#nullable disable

namespace YourMatchTgBot.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "9.0.0-preview.1.24081.2");

            modelBuilder.Entity("InterestUser", b =>
                {
                    b.Property<int>("InterestsId")
                        .HasColumnType("INTEGER");

                    b.Property<long>("UsersId")
                        .HasColumnType("INTEGER");

                    b.HasKey("InterestsId", "UsersId");

                    b.HasIndex("UsersId");

                    b.ToTable("InterestUser");
                });

            modelBuilder.Entity("YourMatchTgBot.Models.City", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Cities");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            Name = "Belgorod"
                        });
                });

            modelBuilder.Entity("YourMatchTgBot.Models.Interest", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Interests");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "📚"
                        },
                        new
                        {
                            Id = 2,
                            Name = "🎲"
                        },
                        new
                        {
                            Id = 3,
                            Name = "🚶"
                        },
                        new
                        {
                            Id = 4,
                            Name = "💃"
                        },
                        new
                        {
                            Id = 5,
                            Name = "🎞"
                        },
                        new
                        {
                            Id = 6,
                            Name = "🏅"
                        },
                        new
                        {
                            Id = 7,
                            Name = "💻"
                        },
                        new
                        {
                            Id = 8,
                            Name = "🚙"
                        },
                        new
                        {
                            Id = 9,
                            Name = "🏔"
                        },
                        new
                        {
                            Id = 10,
                            Name = "🍲"
                        },
                        new
                        {
                            Id = 11,
                            Name = "🎧"
                        },
                        new
                        {
                            Id = 12,
                            Name = "🍳"
                        },
                        new
                        {
                            Id = 13,
                            Name = "🛍"
                        });
                });

            modelBuilder.Entity("YourMatchTgBot.Models.User", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<short?>("Age")
                        .HasColumnType("INTEGER");

                    b.Property<long?>("CityId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<string>("Education")
                        .HasColumnType("TEXT");

                    b.Property<int?>("Gender")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("Height")
                        .HasColumnType("INTEGER");

                    b.Property<string>("LanguageCode")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<int?>("PartnerGender")
                        .HasColumnType("INTEGER");

                    b.Property<int>("State")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ZodiacSign")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("CityId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("YourMatchTgBot.Models.UserPhoto", b =>
                {
                    b.Property<long>("UserId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("PhotoFileId")
                        .HasColumnType("TEXT");

                    b.HasKey("UserId", "PhotoFileId");

                    b.ToTable("UserPhoto");
                });

            modelBuilder.Entity("InterestUser", b =>
                {
                    b.HasOne("YourMatchTgBot.Models.Interest", null)
                        .WithMany()
                        .HasForeignKey("InterestsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("YourMatchTgBot.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UsersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("YourMatchTgBot.Models.User", b =>
                {
                    b.HasOne("YourMatchTgBot.Models.City", "City")
                        .WithMany()
                        .HasForeignKey("CityId");

                    b.Navigation("City");
                });

            modelBuilder.Entity("YourMatchTgBot.Models.UserPhoto", b =>
                {
                    b.HasOne("YourMatchTgBot.Models.User", null)
                        .WithMany("Photos")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("YourMatchTgBot.Models.User", b =>
                {
                    b.Navigation("Photos");
                });
#pragma warning restore 612, 618
        }
    }
}
